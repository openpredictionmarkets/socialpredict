#!/usr/bin/env bash
set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color


# Function to print colored output
print_status() {
  echo -e "${GREEN}[INFO]${NC} $1"
}

print_warning() {
  echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
  echo -e "${RED}[ERROR]${NC} $1"
}

# Determine script's directory
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# --- Platform Compatibility, Linux vs. Apple Silicon ---
# before calling any scripts/* entry points that use docker
if [ -f "$SCRIPT_DIR/scripts/lib/arch.sh" ]; then
  source "$SCRIPT_DIR/scripts/lib/arch.sh"
fi

# --- Main SocialPredict Functionality ---

# Function to check if a command exists
command_exists() {
  command -v "$1" &> /dev/null 2>&1
}
# Initial Checks
# Check if docker compose is installed. Fails if not found.
# Checks if .env file exists. Fails if not found.
check_docker() {
  print_status "Checking that docker compose is installed ..."
  if command_exists docker && docker compose version &> /dev/null; then
    print_status "Found docker compose."
  elif command_exists docker-compose; then
    print_warning "Found docker-compose V1. Please update to V2."
    print_warning "https://docs.docker.com/compose/migrate/"
    exit 1
  else
    print_error "Docker Compose is not installed."
    exit 1
  fi
}

init() {
  check_docker
  if [ ! -f "$SCRIPT_DIR/.env" ]; then
      print_status "Looks like this is the first time running SocialPredict."
      print_warning "Please run './SocialPredict install' to initialize the application."
      exit 1
    else
      print_status "Loading configuration from .env file"
      source "$SCRIPT_DIR/.env"
    fi
}

print_help() {
  cat <<EOF
Usage: ./SocialPredict COMMAND

Commands:
  install     Initialize SocialPredict
  up          Start SocialPredict containers
  down        Stop SocialPredict containers
  exec        Execute command on SocialPredict containers
  backup      Backup operations on SocialPredict

Run './SocialPredict COMMAND --help' for more information on a command.

For more help on how to use SocialPredict, head to https://github.com/openpredictionmarkets/socialpredict/
EOF
}

COMMAND="${1:-"--help"}"
case "$COMMAND" in
  install)
    check_docker
    shift
    export CALLED_FROM_SOCIALPREDICT=yes
    source "${SCRIPT_DIR}/scripts/install.sh"
    unset CALLED_FROM_SOCIALPREDICT
    ;;
  up)
    init
    export CALLED_FROM_SOCIALPREDICT=yes
    source "${SCRIPT_DIR}/scripts/docker-commands.sh" up
    unset CALLED_FROM_SOCIALPREDICT
    ;;
  down)
    init
    export CALLED_FROM_SOCIALPREDICT=yes
    source "${SCRIPT_DIR}/scripts/docker-commands.sh" down
    unset CALLED_FROM_SOCIALPREDICT
    ;;
  exec)
    init
    export CALLED_FROM_SOCIALPREDICT=yes
    shift
    source "$SCRIPT_DIR/scripts/docker-commands.sh" exec "$@"
    unset CALLED_FROM_SOCIALPREDICT
    ;;
  backup)
    init
    export CALLED_FROM_SOCIALPREDICT=yes
    shift
    # Pass remaining args to the backup script, e.g. --save / --list / --restore <file> / --restore-latest
    source "$SCRIPT_DIR/scripts/backup/db_backup.sh" "$@"
    unset CALLED_FROM_SOCIALPREDICT
    ;;
  --help|-h|help)
    print_help
    ;;
  *)
    echo "Unknown command: $COMMAND"
    echo
    print_help
    exit 1
    ;;
esac
