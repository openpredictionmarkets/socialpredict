services:
  db:
    container_name: ${POSTGRES_CONTAINER_NAME}
    image: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DATABASE}
    volumes:
      - ${DATA_DIR}/postgres:/var/lib/postgresql/data
    ports:
      - "${DB_PORT}:${POSTGRES_PORT}"
    networks:
      - database_network

  backend:
    container_name: "${BACKEND_CONTAINER_NAME}"
    image: "${BACKEND_IMAGE_NAME}"
    environment:
      CONTAINER_NAME: ${BACKEND_CONTAINER_NAME}
      DB_HOST: db
      DB_USER: ${POSTGRES_USER}
      DB_PASS: ${POSTGRES_PASSWORD}
    env_file:
      - ../.env
    ports:
      - "${BACKEND_HOSTPORT}:${BACKEND_PORT}"
    volumes:
      - ../backend:/backend
      - ../.env:/backend/.env.dev
    #command: reflex -r '\.go\$' -s -- sh -c './supervisor.sh'
    tty: true
    networks:
      - database_network
    depends_on:
      - db

  https-portal:
    image: steveltn/https-portal:1
    ports:
      - '80:80'
      - '443:443'
    #restart: always
    environment:
      DOMAINS: "${DOMAIN}"
      STAGE: local # Don't use production until staging works
      # FORCE_RENEW: 'true' 
      RENEW_MARGIN_DAYS: ${RENEW_MARGIN_DAYS} 
    volumes:
      - ${DATA_DIR}/https-portal:/var/lib/https-portal
      - ${DATA_DIR}/https-portal:/var/www/vhosts
      - ${DATA_DIR}/https-portal/${DOMAIN}.ssl.conf.erb:/var/lib/nginx-conf/${DOMAIN}.ssl.conf.erb:ro
    networks:
      - database_network
networks:
  database_network:
    driver: bridge
