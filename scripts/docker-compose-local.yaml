services:
  db:
    container_name: ${POSTGRES_CONTAINER_NAME}
    image: postgres:16.6-alpine
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DATABASE}
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - socialpredict_network
    ports:
      - "${DB_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB -h 127.0.0.1 -p 5432"]
      interval: 2s
      timeout: 3s
      retries: 30

  backend:
    container_name: "${BACKEND_CONTAINER_NAME}"
    image: "${BACKEND_IMAGE_NAME}"          # e.g. ghcr.io/openpredictionmarkets/socialpredict-backend
    restart: unless-stopped
    networks:
      - socialpredict_network
    env_file:
      - ../.env
    environment:
      # Make DB settings explicit in case the image expects these names
      DB_HOST: db
      DB_PORT: 5432
      DB_USER: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_NAME: ${POSTGRES_DATABASE}
      APP_ENV: ${APP_ENV}
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "${BACKEND_PORT}:8080"              # keep if you want to hit backend directly from host

  frontend:
    container_name: "${FRONTEND_CONTAINER_NAME}"
    image: "${FRONTEND_IMAGE_NAME}"         # e.g. ghcr.io/openpredictionmarkets/socialpredict-frontend
    restart: unless-stopped
    networks:
      - socialpredict_network
    env_file:
      - ../.env
    environment:
      APP_ENV: ${APP_ENV}
    depends_on:
      - backend
    ports:
      - "${FRONTEND_PORT}:5173"

  webserver:
    container_name: "${NGINX_CONTAINER_NAME}"
    image: nginx:latest
    restart: unless-stopped
    environment:
      APP_ENV: ${APP_ENV}
      DOMAIN: ${DOMAIN}
    volumes:
      - ../data/nginx/vhosts/prod:/etc/nginx/templates/
    networks:
      - socialpredict_network
    ports:
      - "${NGINX_PORT}:80"
    depends_on:
      - backend
      - frontend

networks:
  socialpredict_network:
    name: socialpredict_network

volumes:
  pgdata: {}
