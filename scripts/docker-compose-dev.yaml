services:
  db:
    container_name: ${POSTGRES_CONTAINER_NAME}
    image: postgres:16.6-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DATABASE}
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - socialpredict_dev_network
    ports:
      - "${DB_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB -h 127.0.0.1 -p 5432"]
      interval: 2s
      timeout: 3s
      retries: 30

  backend:
    container_name: "${BACKEND_CONTAINER_NAME}"
    image: socialpredict-dev-backend:latest
    environment:
      APP_ENV: ${APP_ENV}
      CONTAINER_NAME: ${BACKEND_CONTAINER_NAME}
      DB_HOST: db
      DB_PORT: 5432
      DB_USER: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_PASS: ${POSTGRES_PASSWORD}
      DB_NAME: ${POSTGRES_DATABASE}
    env_file:
      - ../.env
    ports:
      - "${BACKEND_PORT}:8080"
    volumes:
      - ../backend:/src                              # keep for live dev (air/nodemon etc.)
    networks:
      - socialpredict_dev_network
    depends_on:
      db:
        condition: service_healthy

  frontend:
    container_name: "${FRONTEND_CONTAINER_NAME}"
    image: socialpredict-dev-frontend:latest
    environment:
      APP_ENV: ${APP_ENV}
    networks:
      - socialpredict_dev_network
    env_file:
      - ../.env
    volumes:
      - ../frontend:/app
      - socialpredict_dev_node_modules:/app/node_modules
    ports:
      - "${FRONTEND_PORT}:5173"
    depends_on:
      - backend

networks:
  socialpredict_dev_network:
    name: socialpredict_dev_network

volumes:
  pgdata: {}
  socialpredict_dev_node_modules: {}
