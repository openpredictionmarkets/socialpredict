#!/bin/bash

set -e  # Stop script on error
set -a  # Automatically export all variables

# Function to check if a command exists
command_exists() {
    type "$1" &> /dev/null
}

run_docker_compose_down() {
     if command_exists docker-compose; then
        echo "Using docker-compose down..."
        docker-compose down --remove-orphans --volumes
    elif command_exists docker && docker compose version &> /dev/null; then
        echo "Using docker compose..."
        docker compose down --remove-orphans --volumes
    else
        echo "Error: Docker Compose is not installed."
        exit 1
    fi
}


run_docker_compose() {
    if command_exists docker-compose; then
        echo "Using docker-compose..."
        docker-compose -f docker-compose.yaml -f docker-compose.prod.yaml up -d
    elif command_exists docker && docker compose version &> /dev/null; then
        echo "Using docker compose..."
        docker compose -f docker-compose.yaml -f docker-compose.prod.yaml up -d
    else
        echo "Error: Docker Compose is not installed."
        exit 1
    fi
}

delete_docker_networks() {
    echo "Cleaning up Docker networks..."
    networks=$(docker network ls --filter name=socialpredict -q)
    for net in $networks; do
        echo "Inspecting network: $net..."
        docker network inspect $net
        containers=$(docker network inspect $net --format '{{json .Containers}}' | jq -r 'keys[]')
        for container in $containers; do
            echo "Disconnecting container $container from network $net..."
            docker network disconnect -f $net $container || true
        done
        echo "Removing network $net..."
        if docker network rm $net; then
            echo "Successfully removed network $net."
        else
            echo "Failed to remove network $net. Checking for errors..."
            docker network inspect $net
        fi
    done
}

confirm_network_creation() {
    echo "Confirming creation of Docker networks..."
    local network_name=$1
    if docker network inspect $network_name > /dev/null 2>&1; then
        echo "Network $network_name is confirmed available."
    else
        echo "Failed to confirm network $network_name. Retrying..."
        sleep 5
        docker network inspect $network_name > /dev/null 2>&1 || {
            echo "Network $network_name failed to be created."
            exit 1
        }
    fi
}

echo "Running docker compose down..."
run_docker_compose _down
echo "Restarting Docker service to ensure clean state..."
sudo systemctl restart docker
echo "Docker service restarted. Waiting for Docker to stabilize..."
sleep 10  # Wait for Docker to fully initialize
#echo "Deleting docker networks."
#delete_docker_networks

echo "Running docker compose and then listing all Docker networks and containers created:"
run_docker_compose
echo "Attempting to confirm network creation."
confirm_network_creation "socialpredict_frontend_network"
confirm_network_creation "socialpredict_database_network"
