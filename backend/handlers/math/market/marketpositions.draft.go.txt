package marketmath

import (
	"encoding/json"
	"net/http"
	"socialpredict/models"
	"socialpredict/util"
	"strconv"
	"time"

	"github.com/gorilla/mux"
	"gorm.io/gorm"
)

type UserBetInfo struct {
	TotalInvested float64
	TotalPayout   float64
	LastBetTime   time.Time
	// Add other necessary fields
}

type MarketPositionResponse struct {
	YesBetters []UserMarketPosition `json:"yesBetters"`
	NoBetters  []UserMarketPosition `json:"noBetters"`
}

type UserMarketPosition struct {
	Username       string    `json:"username"`
	DisplayName    string    `json:"displayName"`
	PersonalEmoji  string    `json:"personalEmoji"`
	AmountInvested float64   `json:"amountInvested"`
	Payout         float64   `json:"payout"`
	Profit         float64   `json:"profit"`
	ProfitPercent  float64   `json:"profitPercent"`
	TotalShares    float64   `json:"totalShares"`
	LastBetTime    time.Time `json:"lastBetTime"`
}

func marketPositionsHandler(w http.ResponseWriter, r *http.Request) {
	vars := mux.Vars(r)
	marketId := vars["marketId"]

	// Database connection
	db := util.GetDB()

	// Convert marketId to int64
	marketIDUint, err := strconv.ParseUint(marketId, 10, 32)
	if err != nil {
		http.Error(w, "Invalid market ID", http.StatusBadRequest)
		return
	}

	var bets []models.Bet
	if err := db.Where("market_id = ?", marketIDUint).Find(&bets).Error; err != nil {
		http.Error(w, "Error fetching bets", http.StatusInternalServerError)
		return
	}

	// Process bets to calculate positions
	yesBetters, noBetters := processBetsForMarketPositions(bets, db)

	response := MarketPositionResponse{
		YesBetters: yesBetters,
		NoBetters:  noBetters,
	}

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(response)
}

func processBetsForMarketPositions(bets []models.Bet, db *gorm.DB) ([]UserMarketPosition, []UserMarketPosition) {
	yesBetInfo := make(map[string]UserBetInfo)
	noBetInfo := make(map[string]UserBetInfo)

	// Aggregate bet data
	for _, bet := range bets {
		userInfo := UserBetInfo{
			TotalInvested: bet.Amount,
			TotalPayout:   calculatePayout(bet), // Implement this based on your logic
			LastBetTime:   bet.PlacedAt,
		}

		if bet.Outcome == "YES" {
			if existing, ok := yesBetInfo[bet.Username]; ok {
				userInfo.TotalInvested += existing.TotalInvested
				userInfo.TotalPayout += existing.TotalPayout
				if bet.PlacedAt.After(existing.LastBetTime) {
					userInfo.LastBetTime = bet.PlacedAt
				}
			}
			yesBetInfo[bet.Username] = userInfo
		} else if bet.Outcome == "NO" {
			if existing, ok := noBetInfo[bet.Username]; ok {
				userInfo.TotalInvested += existing.TotalInvested
				userInfo.TotalPayout += existing.TotalPayout
				if bet.PlacedAt.After(existing.LastBetTime) {
					userInfo.LastBetTime = bet.PlacedAt
				}
			}
			noBetInfo[bet.Username] = userInfo
		}
	}

	// Convert aggregated data into UserMarketPosition slices
	yesBetters := make([]UserMarketPosition, 0, len(yesBetInfo))
	for username, info := range yesBetInfo {
		// Fetch additional user details
		var user models.User
		db.Where("username = ?", username).First(&user)
		yesBetters = append(yesBetters, createUserMarketPosition(user, info))
	}

	noBetters := make([]UserMarketPosition, 0, len(noBetInfo))
	for username, info := range noBetInfo {
		// Fetch additional user details
		var user models.User
		db.Where("username = ?", username).First(&user)
		noBetters = append(noBetters, createUserMarketPosition(user, info))
	}

	return yesBetters, noBetters
}
