package marketmath

import (
	"socialpredict/models"

	"gorm.io/gorm"
)

func CalculateUserSharesOwnedOnMarket(db *gorm.DB, username string, marketID uint) (float64, error) {
	var allBetsOnMarket []models.Bet
	var userBets []models.Bet
	var totalShares float64

	// Fetch the market and all bets to calculate probabilities
	var market models.Market
	db.First(&market, marketID)

	// Fetch all bets in the specified market within bets table
	err := db.Where("market_id = ?", marketID).Find(&allBetsOnMarket).Error
	if err != nil {
		return 0, err
	}

	// Extract bets made by the user from the list of all bets
	for _, bet := range allBetsOnMarket {
		if bet.Username == username {
			userBets = append(userBets, bet)
		}
	}

	// get a timeline of probability changes for the market
	probabilityChanges := CalculateMarketProbabilitiesWPAM(market, allBetsOnMarket)

	//
	for _, bet := range userBets {

		shares := CalculateUserSharesOwnedOnMarket(userBets, probabilityChanges)
		totalShares += shares
	}

	return totalShares, nil
}

func CalculateUserSharesOwnedOnMarket(userBets []models.Bet, probabilityChanges ProbabilityChange) (uint, error) {
	// ... [previous code] ...

	for _, bet := range userBets {
		probabilityAtBetTime := getProbabilityAtTime(probabilityChanges, bet.PlacedAt)
		shares := calculateSharesForBet(bet, probabilityAtBetTime)
		totalShares += shares
	}

	return totalShares, nil
}

func CalculateTotalValueOfShares(sharesOwned, marketPrice float64) float64 {
	// Multiply the total shares owned by the current market price per share
	return sharesOwned * marketPrice
}

func ConvertAmountToShares(sellAmount, marketPrice float64) float64 {
	// Divide the sell amount by the market price to get the number of shares
	return sellAmount / marketPrice
}
